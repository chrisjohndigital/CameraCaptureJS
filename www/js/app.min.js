var ModelItem=Backbone.Model.extend({defaults:{cameraViewReference:null,supportsWebRTC:!1,supportsMediaRecorderAPI:!1,localStream:null,appHeight:800,cameraMaxWidth:1280,cameraMaxHeight:720,cameraMinWidth:640,cameraMinHeight:480,includeAudio:!1,cameraScaleComplete:!1,prepRecording:!1,publishRecording:!1,errorMsgArray:['<h1>WebRTC required - Sorry, unable to connect to camera</h1><p>Please ensure no other devices are using the camera and refresh the browser.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/WebRTC">More information about WebRTC</a></p>','<h2><a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder_API">Media Recorder API</a> unsupported, try Firefox</h2>',"Sorry, the recorder has stopped unexpectedly"],mime:"video/webm",fileAddress:null,fileLoad:!1,scaleAssets:!1,useMandatoryOptionalSyntax:!0},initialize:function(){_.bindAll(this,"featureSupport"),this.featureSupport()},featureSupport:function(){(navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia)&&this.set("supportsWebRTC",!0),window.MediaRecorder&&window.Blob&&window.FileReader&&this.set("supportsMediaRecorderAPI",!0)}}),PlaybackView=Backbone.View.extend({el:null,model:null,initialize:function(){_.bindAll(this,"loadFile","validateDOM","prepRecording"),this.model.bind("change:fileLoad",this.loadFile,this),this.model.bind("change:prepRecording",this.prepRecording,this)},loadFile:function(){if(null!=this.model.get("fileAddress")&&1==this.validateDOM()){$(this.el).empty();var a=this,b=new FileReader;b.onloadend=function(c){c.target.readyState==FileReader.DONE&&($(a.el).attr("src",c.target.result),$(a.el).attr("width",a.model.get("cameraMaxWidth")),$(a.el).attr("width",a.model.get("cameraMaxHeight")),$(a.el).css("display","block"),a.model.set("scaleAssets",!a.model.get("scaleAssets"))),b=null},b.readAsDataURL(this.model.get("fileAddress"))}},validateDOM:function(){return $(this.el).length>0?!0:!1},prepRecording:function(){$(this.el).css("display","none")}}),MediaRecorderView=Backbone.View.extend({el:null,model:null,recorder:null,initialize:function(){_.bindAll(this,"render","publishRecording","recordStart","recordStop","readBlob"),this.model.bind("change:cameraScaleComplete",this.render,this)},render:function(){this.model.bind("change:publishRecording",this.publishRecording,this)},publishRecording:function(){1==this.model.get("publishRecording")?this.recordStart():this.recordStop()},recordStart:function(){if(null!=this.model.get("localStream")){this.recorder=new window.MediaRecorder(this.model.get("localStream"));var a=this;this.recorder.ondataavailable=function(b){if("inactive"==a.recorder.state){var c=new window.Blob([b.data],{type:a.model.get("mime")});a.readBlob(c)}},this.recorder.onstop=function(){a.recorder=null,1==a.model.get("publishRecording")&&alert(a.model.get("errorMsgArray")[2])},this.recorder.start()}},recordStop:function(){this.recorder.stop()},readBlob:function(a){this.model.set("fileAddress",a),this.model.set("fileLoad",!this.model.get("fileLoad"))}}),CameraView=Backbone.View.extend({el:null,initialize:function(){_.bindAll(this,"render","validateDOM","supportsWebRTC","adjustForBrowser","readyFunction","handleCameraPublishing","handleCameraPrep")},render:function(){if(1==this.validateDOM()&&1==this.supportsWebRTC()){this.adjustForBrowser();var a=this;if($(this.el).on("canplay",this.readyFunction),1==this.model.get("useMandatoryOptionalSyntax"))var b={mandatory:{minHeight:this.model.get("cameraMinHeight"),minWidth:this.model.get("cameraMinWidth"),maxHeight:this.model.get("cameraMaxHeight"),maxWidth:this.model.get("cameraMaxWidth")}};else var b={width:{min:this.model.get("cameraMinWidth"),ideal:this.model.get("cameraMaxWidth"),max:this.model.get("cameraMaxWidth")},height:{min:this.model.get("cameraMinHeight"),ideal:this.model.get("cameraMaxHeight"),max:this.model.get("cameraMaxHeight")}};navigator.getMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia,navigator.getMedia({video:b,audio:this.model.get("includeAudio")},function(b){$(a.el).attr("src",window.URL.createObjectURL(b)),a.model.set({localStream:b})},function(a){alert(a)})}else $(this.el).parent().html(this.model.get("errorMsgArray")[0])},validateDOM:function(){return $(this.el).length>0?!0:!1},supportsWebRTC:function(){return this.model.get("supportsWebRTC")?!0:!1},adjustForBrowser:function(){-1!=navigator.userAgent.indexOf("Firefox")&&(console.log("Firefox"),this.model.set("useMandatoryOptionalSyntax",!1))},readyFunction:function(a){0==this.model.get("cameraScaleComplete")&&($(this.el).attr("width",this.model.get("cameraMaxWidth")),$(this.el).attr("height",this.model.get("cameraMaxHeight")),this.model.bind("change:publishRecording",this.handleCameraPublishing,this),this.model.bind("change:prepRecording",this.handleCameraPrep,this),this.model.set("cameraScaleComplete",!0),this.model.set("scaleAssets",!this.model.get("scaleAssets")))},handleCameraPublishing:function(){0==this.model.get("publishRecording")?$(this.el).css("display","none"):$(this.el).css("display","block")},handleCameraPrep:function(){$(this.el).css("display","block")}}),MenuView=Backbone.View.extend({el:null,initialize:function(){_.bindAll(this,"render","validateDOM","handleCameraPublishing","prepRecording","prepPlayback","applyStyles"),this.model.bind("change:cameraScaleComplete",this.render,this)},render:function(){1==this.validateDOM()&&(this.model.bind("change:publishRecording",this.handleCameraPublishing,this),this.model.bind("change:prepRecording",this.prepRecording,this),$(this.$("button")[0]).css("display","inline-block"))},validateDOM:function(){return $(this.el).length>0&&1==this.model.get("supportsMediaRecorderAPI")&&1==this.model.get("supportsWebRTC")?!0:($(this.el).html(this.model.get("errorMsgArray")[1]),!1)},handleCameraPublishing:function(){0==this.model.get("publishRecording")?(this.prepPlayback(),this.removeStyles()):(this.prepRecording(),this.applyStyles())},prepPlayback:function(){$(this.$("button")[0]).css("display","none"),$(this.$("button")[1]).css("display","inline-block"),$(this.$("button")[2]).css("display","inline-block")},prepRecording:function(){$(this.$("button")[0]).css("display","inline-block"),$(this.$("button")[1]).css("display","none"),$(this.$("button")[2]).css("display","none")},applyStyles:function(){$(this.$("button")[0]).addClass("cam-pulse")},removeStyles:function(){$(this.$("button")[0]).removeClass("cam-pulse")}}),ScaleManager=Backbone.View.extend({el:null,initialize:function(){_.bindAll(this,"render","validateDOM","transformObject"),this.model.bind("change:scaleAssets",this.render,this)},render:function(){if(1==this.validateDOM()&&1==this.model.get("supportsWebRTC")){var a=1;$(window).width()<this.model.get("cameraMaxWidth")?(a=100*$(window).width()/this.model.get("cameraMaxWidth")/100,a*this.model.get("appHeight")>$(window).height()&&(a=100*$(window).height()/this.model.get("appHeight")/100),this.transformObject($(this.el),a)):$(window).height()<this.model.get("appHeight")?(a=100*$(window).height()/this.model.get("appHeight")/100,a*this.model.get("cameraMaxWidth")>$(window).width()&&(a=100*$(window).width()/this.model.get("cameraMaxWidth")/100),this.transformObject($(this.el),a)):(a=1,this.transformObject($(this.el),a))}},validateDOM:function(){return $(this.el).length>0?!0:!1},transformObject:function(a,b){$(a).css("transform","scale("+b+","+b+")"),$(a).css("-webkit-transform","scale("+b+","+b+")"),$(a).css("-ms-transform","scale("+b+","+b+")")}}),ControllerItem=Backbone.View.extend({el:null,events:function(){return _.extend({"click #btn-record":"toggleRecord"},{"click #btn-cancel":"clearRecording"},{"click #btn-rewind":"reloadRecording"})},initialize:function(){_.bindAll(this,"render","resizeWindow","toggleRecord","clearRecording","reloadRecording"),this.render()},render:function(){var a=this.model.get("cameraViewReference");a.render(),$(window).bind("resize",this.resizeWindow)},resizeWindow:function(){this.model.set("scaleAssets",!this.model.get("scaleAssets"))},toggleRecord:function(a){this.model.set("publishRecording",!this.model.get("publishRecording"))},clearRecording:function(a){this.model.set("prepRecording",!this.model.get("prepRecording"))},reloadRecording:function(a){this.model.set("fileLoad",!this.model.get("fileLoad"))}});$(document).ready(function(){!function(a){var b=new ModelItem,c=(new PlaybackView({model:b,el:a("#playback")}),new MediaRecorderView({model:b}),new MenuView({model:b,el:a(".menu")}),new ScaleManager({model:b,el:a(".container")}),new CameraView({model:b,el:a("#camera")}));b.set("cameraViewReference",c);new ControllerItem({model:b,el:a("body")})}(jQuery)});